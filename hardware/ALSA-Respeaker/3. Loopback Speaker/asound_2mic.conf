# Конфигурация ALSA для 2-mic respeaker'а 
# (С) Alexander Eltsyn (ae@aeinc.ru)
#
# Особенности:
# 1. Имеется 2 аудиовхода с раздельной регулировкой громкости:
#   - "default", основной аудиовход колонки, в alsamixer называется "@Default"
#   - "voice", аудиовход для голосовых сообщений, в alsamixer "@Voice"
# 2. Для реализации программного эходава сконфигурирован 4-х канальный аудиовыход "capture":
#   - каналы 0 и 1: данные от левого и правого микрофона
#   - канал 2: звук с "голосового" аудиовхода, снятый после регулировки громкости
#   - канал 3: звук с "основного" аудиовхода, снятый после регулировки громкости
# Для конфигурации необходимо загрузить драйвер snd-aloop, добавив его в файл
# /etc/modules
#
# Документация по конфигурации ALSA:
# https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture#Configuration
# https://www.alsa-project.org/alsa-doc/alsa-lib/pcm_plugins.html
#
# МУДРОСТЬ: Для того чтобы сервис squeezelite не блокировал аудиокарту его необходимо запускать 
# не под системным а под обычным пользователем. Для этого в /etc/init.d/squeezelite 
# добавляем параметры  --user pi --chuid pi  в команду start-stop-daemon
#

# Общие настройки ALSA
defaults {
    # use samplerate to resample as speexdsp resample is bad
    pcm.rate_converter samplerate
    # defaults.pcm.rate_converter "lavrate"

    ctl.!card seeed2micvoicec
    pcm.!card seeed2micvoicec
    pcm.device 0
}

# "Основной" аудиовход, после регулировки громкости - моно в правом канале
pcm.!default {
    type softvol
    control.name "@Default"
    slave.pcm {
        type route
        slave {
            pcm {
                type plug
                slave.pcm splitter
                route_policy duplicate
            }
            channels 2
        }
        ttable.0.0 0  # левый канал
        ttable.1.0 0
        ttable.0.1 1  # right channel
        ttable.1.1 1
    }
}

# Аудиовход для голосовых сообщений, после регулятора громкости моно в левом канале
pcm.voice {
    type softvol
    control.name "@Voice"
    slave.pcm {
        type route
        slave {
            pcm {
                type plug
                slave.pcm splitter
                route_policy duplicate
            }
            channels 2
        }
        ttable.0.0 1  # левый канал
        ttable.1.0 1
        ttable.0.1 0  # right channel
        ttable.1.1 0
    }
}

# Мультиплексор splitter является устройством вывода и в отличие от 
# написанного в документации не объединяют а разъединяют каналы на slave.a и slave.b
pcm.splitter {
    type multi
    
    # Отправляем звук на колонку
    slaves.a {
        pcm {
            type route
            slave {
                pcm speaker
                channels 2
            }
            ttable.0.0 0  # левый канал
            ttable.1.0 0
            ttable.0.1 1  # right channel
            ttable.1.1 1
        }
        channels 2

    }
    # и на looper
    slaves.b {
        pcm looper
        channels 2
    }
    # Четыре входных канала.
    bindings.0.slave a
    bindings.0.channel 0
    bindings.1.slave a
    bindings.1.channel 1
    bindings.2.slave b
    bindings.2.channel 0
    bindings.3.slave b
    bindings.3.channel 1
}

# Миксер, позволяющий одновременно выводить в аппаратное устройтво loopback несколько аудпопотоков
pcm.looper {
    type dmix
    ipc_key 1234503
    ipc_key_add_uid true
    ipc_perm 0666
    slave {
        pcm "hw:Loopback,0,0"
        channels 2
        period_time 0
        period_size 1024
        buffer_size 4096
        rate 44100
    }
}


# Это 4х-канльное устройство записи:
# 1 и 2 каналаы - микрофонные входы
# 3 канал - нормализованный звук с основного аудиовхода снятый после регулировки громкости
# 4 канал - нормализованный звук с голосового аудиовхода снятый после регулировки громкости
pcm.capture {
    type multi

    # Объединяем микрофонный вход
    slaves.a.pcm "mic"
    slaves.a.channels 2
    # и копию аудиопотока (моно), передаваемого на колонку (правый канал, левый не заполнен)
    slaves.b.pcm "hw:Loopback,1,0"
    slaves.b.channels 2

    bindings.0.slave a
    bindings.0.channel 0
    bindings.1.slave a
    bindings.1.channel 1
    bindings.2.slave b
    bindings.2.channel 0
    bindings.3.slave b
    bindings.3.channel 1
}

# Final output sound mixer (speaker hardware)
pcm.speaker {
    type dmix
    ipc_key 1234501
    ipc_perm 0666
    slave {
        pcm "hw:seeed2micvoicec"
        channels 1
        period_time 0
        period_size 1024
        buffer_size 4096
        rate 44100
    }
}

# Micropohone input (sound card hardware)
pcm.mic {
    type dsnoop
    ipc_key 1234502
    ipc_perm 0666
    slave {
        pcm "hw:seeed2micvoicec"
        channels 2
        rate 44100
    }
}

